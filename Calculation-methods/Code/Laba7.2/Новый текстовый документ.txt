Тема: «Задача Коши для обыкновенных дифференциальных 
уравнений».

Упражнения:
1. Функция ошибок определяется обычно интегралом, но может быть определена как решение дифференциального уравнения: y`(x)=2/(sqrt(Pi)) * e^((-x)^2), y(0)=0.
Напишите программу, которая печатает значения функции ошибок erf(x) через это ДУ для значений x=0.0, 0.1, 0.2, …,1.9, 2.0. Сравните эту таблицу с 
таблицей для значений функции ошибок, полученных в ЛР6 с помощью численных квадратур. Сравните время, необходимое этим двум методам для 
генерирования одной и той же таблицы значений.

2. Рассмотрим простую экосистему, состоящую из кроликов, для которых имеется неограниченный запас пищи и лис, которые для пропитания охотятся за кроликами. 
Классическая математическая модель описывает эту систему двумя нелинейными дифференциальными уравнениями первого порядка: 
dr/dt = 2r-αrf,r(0)=r_0
df/dt = -f+αrf,f(0)=f_0, где t-время, r=r(t)-число кроликов, f=f(t)- число лис и α-положительная константа. При α = 0 эти две популяции не взаимодействуют. 
Поэтому кролики неограниченно размножаются, а лисы вымирают от голода. При α > 0 лисы встречают кроликов с вероятностью пропорциональной числу тех и других. 
В результате таких встреч число кроликов убывает, а число лис растет.
А) Исследуйте поведение этой системы при α = 0.01 и для различных значений r_0,f_0 от 2 или 3 и до нескольких тысяч.
Б) Вычислите решение для r_0 = 15,f_0 = 22.В конце концов вы должны получить, что число кроликов меньше единицы. Это можно интерпретировать так, 
что кролики вымирают. Найдите начальные условия, которые обрекают на вымирание лис. Найдите начальные условия r_0 = f_0 ,при которых вымирают оба вида.


Задания необходимо было выполнить на языке Python. Для этого я написал следующие функции программу:

import numpy as np
import matplotlib.pyplot as plt
import math

func = lambda x : (2/np.sqrt(np.pi))*np.exp(-x ** 2)

x = np.linspace(0, 2, 100)
plt.plot(x, func(x))

N = 1000

def euler_method(x_end):
    y_values = [0]  # начальное условие y(0) = 0
    h = x_end/N
    x = 0
    for i in range(1, N+1):
        y_new = y_values[i-1] + h * func(x)
        x += h
        y_values.append(y_new)

    return y_values

x_vals = list(range(21))
y_vals = euler_method(2)
# for i in range(len(y_vals)):
#     print(i, y_vals[i])
# plt.plot(x_vals, y_vals)

for i,j in zip(x_vals, y_vals[::N//20]):
    print(f"{i*0.1:.1f}: {j:.5f} {math.erf(i*0.1):.5f}")

# Погрешность O(h^2)


////////////////////////////////////////////////////////////////////////////////////////
a = 1

# r = [100]
# f = [100]

r = [20]
f = [20]


# r = [15]
# f = [22]

# r = [1]
# f = [1]

rab = lambda t: 2*r[t] - a*r[t]*f[t]
fox = lambda t: -f[t] + a*r[t]*f[t]

t_end = 20
N = 1000


def sim():
    h = t_end/N
    for i in range(1, N):
        r.append(r[-1] + h * rab(i-1))
        f.append(f[-1] + h * fox(i-1))

sim()

t = np.linspace(0, t_end, N)

plt.plot(t, r, 'tab:blue')
plt.plot(t, f, 'tab:orange')



print(f[-1])
print(r[-1])

Мои функции выглядят не красиво, и описываю  всё не в полной мере.

Тебе необходимо разбить код на отдельные составляющие по каждому заданию, красиво структурировать это по функциям и реализовать main, для вызова этих функций и красивого вывода в консоль. Реализовать красивый вывод в консоль, ге будет видно, что выводиться для какого задания, а так же более подробно описать все выводимые значения в консоли на русском языке. А так же добавить подробные комментарии в код на русском языке. Так же реализовать два графика, отдельно по графику на каждое задание, красивые полные, информативные графики, средствами matplotlib.pyplot. 